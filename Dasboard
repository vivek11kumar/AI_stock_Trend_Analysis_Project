# dashboard/streamlit_app.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import joblib
from datetime import datetime, timedelta
import yfinance as yf

st.set_page_config(page_title="AI Stock Predictor", layout="wide")

class StockPredictionDashboard:
    def __init__(self):
        self.symbols = ['AAPL', 'ADANIPORTS.NS']
        self.models = self.load_models()

    @st.cache_data
    def load_models(self):
        """Load trained models"""
        models = {}
        for symbol in self.symbols:
            symbol_clean = symbol.replace('.', '_')
            try:
                models[symbol] = {
                    'XGBoost': joblib.load(f'models/{symbol_clean}_XGBoost.pkl'),
                    'scaler': joblib.load(f'models/{symbol_clean}_scaler.pkl')
                }
            except:
                st.error(f"Could not load models for {symbol}")
        return models

    def get_latest_data(self, symbol, period='1mo'):
        """Get latest stock data"""
        ticker = yf.Ticker(symbol)
        data = ticker.history(period=period)
        return data

    def calculate_features(self, df):
        """Calculate technical indicators"""
        # Basic features (simplified version)
        df['RSI_14'] = 50  # Placeholder
        df['SMA_20'] = df['Close'].rolling(20).mean()
        df['Returns'] = df['Close'].pct_change()
        # Add more features as needed
        return df

    def predict_direction(self, symbol):
        """Predict next day direction"""
        if symbol not in self.models:
            return None, None

        # Get latest data
        data = self.get_latest_data(symbol)
        data = self.calculate_features(data)

        # Prepare features (simplified)
        latest_features = np.array([[50, 0.01, 0.02, 100, 0.5]])  # Placeholder

        # Scale features
        scaled_features = self.models[symbol]['scaler'].transform(latest_features)

        # Predict
        model = self.models[symbol]['XGBoost']
        prediction = model.predict(scaled_features)[0]
        probability = model.predict_proba(scaled_features)[0]

        return prediction, probability

    def create_price_chart(self, symbol, period='3mo'):
        """Create interactive price chart"""
        data = self.get_latest_data(symbol, period)

        fig = go.Figure()

        fig.add_trace(go.Candlestick(
            x=data.index,
            open=data['Open'],
            high=data['High'],
            low=data['Low'],
            close=data['Close'],
            name=symbol
        ))

        fig.update_layout(
            title=f'{symbol} Price Chart',
            yaxis_title='Price ($)',
            xaxis_title='Date',
            height=500
        )

        return fig

    def run_dashboard(self):
        """Main dashboard function"""
        st.title("üöÄ AI Stock Prediction Dashboard")
        st.markdown("---")

        # Sidebar
        st.sidebar.title("Settings")
        selected_symbol = st.sidebar.selectbox("Select Stock", self.symbols)

        # Main content
        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            st.subheader(f"{selected_symbol} Price Chart")
            chart = self.create_price_chart(selected_symbol)
            st.plotly_chart(chart, use_container_width=True)

        with col2:
            st.subheader("Prediction")
            prediction, probability = self.predict_direction(selected_symbol)

            if prediction is not None:
                direction = "üü¢ UP" if prediction == 1 else "üî¥ DOWN"
                confidence = max(probability) * 100

                st.metric("Direction", direction)
                st.metric("Confidence", f"{confidence:.1f}%")
            else:
                st.error("Model not available")

        with col3:
            st.subheader("Key Metrics")
            data = self.get_latest_data(selected_symbol, '1d')
            if not data.empty:
                latest = data.iloc[-1]
                prev = data.iloc[-2] if len(data) > 1 else latest

                change = latest['Close'] - prev['Close']
                change_pct = (change / prev['Close']) * 100

                st.metric("Current Price", f"${latest['Close']:.2f}")
                st.metric("Daily Change", f"${change:.2f}", f"{change_pct:.2f}%")
                st.metric("Volume", f"{latest['Volume']:,.0f}")

        # Model Performance Section
        st.markdown("---")
        st.subheader("üìä Model Performance")

        # Placeholder performance metrics
        perf_col1, perf_col2, perf_col3, perf_col4 = st.columns(4)

        with perf_col1:
            st.metric("Accuracy", "65.2%")
        with perf_col2:
            st.metric("Precision", "68.1%")
        with perf_col3:
            st.metric("F1-Score", "66.5%")
        with perf_col4:
            st.metric("AUC", "0.712")

        # Feature Importance
        st.subheader("üîç Feature Importance")
